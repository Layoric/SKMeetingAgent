@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div id="app">
   <chat-app />
</div>

<script type="module">
import {nextTick, onMounted, ref} from "vue"
import {mount} from "./mjs/app.mjs"
import {
    ContinueGptAgentTask, 
    ListChatHistoryForTask, 
    UpdateAgentCommand,
    QueryStoredAgentTasks, 
    QueryTeamUser, 
    StartGptAgentTask,
    UpdateAgentTask
} from "./mjs/dtos.mjs"
import {useClient, useMetadata} from "@@servicestack/vue" 

const App = {
    setup() {
        const client = useClient();
        const chatHistory = ref([]);
        const chatPrompt = ref('');
        const loading = ref(false);
        const commandHistory = ref([]);
        const task = ref({completed: false});
        const showNotification = ref(false);
        const tasks = ref([]);
        const users = ref([]);
        const cancelTask = ref(false);
        
        let humanInput = [];
        
        onMounted(async () => {
            let taskResponse = await client.api(new QueryStoredAgentTasks());
            if (taskResponse.succeeded) {
                tasks.value = taskResponse.response.results;
            }
            let userResponse = await client.api(new QueryTeamUser());
            if (userResponse.succeeded) {
                users.value = userResponse.response.results;
            }
        });
        
        const { makeDto, apiOf } = useMetadata();
        
        /// Kick off a new task and conversation with the Agent.
        /// The first chat response will contain the first command to execute.
        /// If the command doesn't require confirmation, continue the chat.
        /// Here the client specifies the agentType and successCriteria for the task.
        async function startChat(prompt) {
            loading.value = true;

            let api = await client.api(new StartGptAgentTask({ 
                prompt: prompt, 
                agentType: 'BookingAgent',
                successCriteria: 'Successfully book the required meeting room with mentioned attendees.'
            }));
            if (api.succeeded) {
                let res = api.response;
                console.log(res);
                await updateTaskCommand(res);
                await fetchHistory(res.task.id);
                if (!requiresConfirmation(res.command)) {
                    await automaticContinue(res);
                }
                // TODO Clear prompt
            }
            loading.value = false;
        }
        
        /// Check if the task is completed, otherwise continue with conversation.
        async function automaticContinue(chatResponse) {
            if (chatResponse.task.completed) {
                taskComplete();
                return;
            }
            let taskId = chatResponse.task.id;
            let command = chatResponse.command;
            let commandResponse = await performCommand(command); 
            setTimeout(async () => {
                await continueChat(taskId, command, commandResponse);
            }, 1000);
        }
        
        /// After the first chat response, update the task and command history.
        /// Continue the chat if the command doesn't require confirmation.
        /// Otherwise, wait for the user to confirm the command.
        /// ContinueChat is a recursive function that will continue until the task is completed
        /// or the user cancels the task.
        async function continueChat(taskId, command, commandResponse) {
            loading.value = true;
            if (cancelTask.value) {
                cancelTask.value = false;
                console.log('cancelTask', taskId, command, commandResponse)
                return;
            }
            console.log('continueChat', taskId, command, commandResponse)
            // Extract the last command from the last chat response
            let api = await client.api(new ContinueGptAgentTask(
                { 
                    taskId: taskId,
                    command: command, 
                    commandResponse: commandResponse
                }));
            if (api.succeeded) {
                let chatResponse = api.response;
                task.value = chatResponse.task;
                if (!chatResponse.task.completed) {
                    let res = api.response;
                    await updateTaskCommand(res);
                    await fetchHistory(taskId);
                    if (!requiresConfirmation(res.command)) {
                        await automaticContinue(res);
                    }
                }
                else {
                    taskComplete();
                }
            }
            loading.value = false;
        }
        
        /// Show task complete notification.
        function taskComplete() {
            console.log('Task completed!');
            showNotification.value = true;
            setTimeout(() => {
                showNotification.value = false;
            }, 5000);
        }

        /// Update the task and command history
        /// and return, this should be done after any
        /// chat interaction with the agent.
        async function updateTaskCommand(chatResponse) {
            task.value = chatResponse.task;
            let command = chatResponse.command;
            let thoughts = chatResponse.thoughts;
            if (command != null) {
                commandHistory.value.push(command);               
            }
            else {
                // internal command, eg memory add
            }            
            return { command, thoughts, task };
        }
        
        /// If the API metadata shows the use of 
        /// the ConfirmationRequired attribute, 
        /// we can automatically stop and ask the user to confirm.
        function requiresConfirmation(command) {
            if (!command || command.name == null)
                return false;
            let commandApi = apiOf(command.name);
            if (!commandApi || !commandApi.request)
                return false;
            let attrs = commandApi.request.attributes;
            if (!attrs)
                return false;
            let requiresConfirmation = attrs.find(x => x.name === 'ConfirmationRequired');
            return requiresConfirmation != null;
        }
        
        /// Performs the command from the Agent on behalf of the user.
        /// Returns the response from the API.
        /// Response can be null if the command is not supported.
        /// Response is fed back into the Agent to continue the conversation.
        async function performCommand(command) {
            if (command == null) {
                return null;    
            }
                
            console.log('performCommand', command);
            let result = {};
            let requestDto = makeDto(command.name, command.body);
            let api = await client.api(requestDto);
            if (api.succeeded) {
                console.log(command.name, 'Success', api.response);
                result = api.response;
            }
            else {
                // Populate the command response with the error from the API.
                console.log(command.name, 'Failed', api.error);
                result = api.error;
            }
            
            let updateCommand = await client.api(new UpdateAgentCommand({commandId: command.id, commandResponse: result}));
            return result;
        }
        
        /// The chat history also has the command from the Agent.
        async function fetchHistory(taskId) {
            let historyReq = new ListChatHistoryForTask({ taskId: taskId });
            let history = await client.api(historyReq);
            if (history.succeeded) {
                let fullChatHistory = history.response.chatHistory;
                // sort fullChatHistory by id ascending
                fullChatHistory.sort((a, b) => a.id - b.id);
                chatHistory.value = fullChatHistory;
                console.log('fullChatHistory', fullChatHistory);
                for(let i = 0; i < chatHistory.value.length; i++) {
                    let chat = chatHistory.value[i];
                    if (chat.command != null && chat.role === 'Agent') {
                        console.log('chat.command', chat.command)
                        chat.command.requestDto = makeDto(chat.command.name, chat.command.body);
                    }
                }
                await refreshTask(taskId);
            }
        }
        
        async function refreshTask(taskId) {
            let taskResponse = await client.api(new QueryStoredAgentTasks({id: taskId}));
            if (taskResponse.succeeded) {
                task.value = taskResponse.response.results[0];
            }
        }
        
        async function onAutoFormSuccess(taskId, command) {
            console.log('onAutoFormSuccess', taskId, command);
            if (command == null) {
                return;
            }
            let commandName = command.name;
            if (commandName === 'CreateCalendarEvent') {
                let request = new UpdateAgentTask({id: taskId, completed: true});
                let api = await client.api(request);
                if (api.succeeded) {
                    taskComplete()
                    await fetchHistory(taskId);
                }
            }
        }

        return {
        chatPrompt, 
        chatHistory, 
        startChat, 
        task, 
        loading, 
        commandHistory, 
        showNotification,
        tasks,
        users,
        onAutoFormSuccess
        }
    },
}

mount('#app', App)
</script>